name: Node.js CI && Publish Docker image

on: [ push ]

jobs:
  build:
    name: Build

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node-version: [ 20.x ]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
        env:
          CI: true

      - name: Install packages
        env:
          CI: true
        run: npx update-browserslist-db@latest && yarn install

      #- name: Run tests
      #  env:
      #    CI: true
      #  run: yarn test

      - name: Build frontend
        env:
          CI: true
        run: yarn build

#      - name: Build SSR
#        env:
#          CI: true
#        run: yarn build:ssr

      - name: Upload build as artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build

  prepare_publish:
    needs: build
    name: Prepare Publish

    runs-on: ubuntu-latest

    outputs:
      branch: ${{ steps.branch.outputs.result }}
      tag: ${{ steps.tag.outputs.result }}

    steps:
      - uses: actions/checkout@v4
      - id: branch
        run: echo ::set-output name=result::${GITHUB_REF#refs/heads/}
      - uses: actions/github-script@v3
        id: tag
        with:
          script: |
            const ref = process.env.GITHUB_REF
            if (!ref.startsWith("refs/tags/")) {
              return ''
            }
            const tag = ref.replace(/^refs\/tags\//, "")
            return tag
          result-encoding: string

  push_master_to_registry:
    needs: prepare_publish
    if: ${{ needs.prepare_publish.outputs.branch == 'master' }}

    name: Push Docker image latest
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache main image layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-main-cache
          key: ${{ runner.os }}-buildx-main-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-main-

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push latest to Docker Hub (arm64)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_REPOSITORY }}:movies-react-app-latest
          platforms: linux/arm64
          cache-from: type=local,src=/tmp/.buildx-main-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-main-cache

  push_tag_to_registry:
    needs: prepare_publish
    if: ${{ needs.prepare_publish.outputs.tag != '' }}

    name: Push Docker image tag to Docker Hub
    runs-on: ubuntu-latest

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Push tag to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_REPOSITORY }}:movies-react-app-${{ needs.prepare_publish.outputs.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          platforms: linux/arm64
